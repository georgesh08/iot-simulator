version: "3.9"

services:
  simulator:
    container_name: simulator
    build:
      context: .
      dockerfile: Dockerfile.simulator
    environment:
      SIMULATOR_PORT: ${SIMULATOR_PORT}
      CONTROLLER_PORT: ${CONTROLLER_PORT}
      CONTROLLER_HOST: ${CONTROLLER_HOST}
      ELK_HOST: ${ELK_HOST}
      ELK_PORT: ${ELK_PORT}
    command: ["25", "3"]
    stdin_open: true
    ports:
      - "14622:14622"
    networks:
      - app_network
  
  controller:
    container_name: controller
    build:
      context: .
      dockerfile: Dockerfile.controller
    environment:
      MONGODB_HOST: ${MONGODB_HOST}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      CONTROLLER_PORT: ${CONTROLLER_PORT}
      RABBITMQ_HOSTNAME: ${RABBITMQ_HOSTNAME}
      ELK_HOST: ${ELK_HOST}
      ELK_PORT: ${ELK_PORT}
    stdin_open: true
    ports:
      - "14620:14620"
      - ${CONTROLLER_PORT}:${CONTROLLER_PORT}
    networks:
      - app_network
  
  ruleengine:
    container_name: ruleengine
    build:
      context: . 
      dockerfile: Dockerfile.engine
    environment:
        RABBITMQ_HOSTNAME: ${RABBITMQ_HOSTNAME}
        RABBITMQ_HOSTPORT: ${RABBITMQ_HOSTPORT}
        ELK_HOST: ${ELK_HOST}
        ELK_PORT: ${ELK_PORT}
    stdin_open: true
    ports:
      - "14624:14624"
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # Default RabbitMQ port
      - "15672:15672" # Management console port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - app_network
  
  mongodb:
    container_name: mongodb
    image: mongo:6-jammy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - dbdata6:/data/db
    networks:
      - app_network

  elasticsearch:
    image: elasticsearch:8.16.6
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app_network
  
  integration-tests:
    container_name: integration-tests
    build:
      context: .
      dockerfile: Dockerfile.integration
    depends_on:
      simulator:
        condition: service_started
      controller:
        condition: service_started
    environment:
      CONTROLLER_HOST: ${CONTROLLER_HOST}
      CONTROLLER_PORT: ${CONTROLLER_PORT}
    networks:
      - app_network

  logstash:
    image: logstash:8.16.6
    container_name: log
    ports:
      - "5044:5044"  
    environment:
      discovery.seed_hosts: logstash
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - app_network

  kibana:
    image: kibana:8.16.6
    container_name: kib
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}      
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}  
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app_network

  k6_lt_many_devices_low_rate:
    image: grafana/k6:latest
    container_name: k6_lt_many_devices_low_rate
    depends_on:
      integration-tests:
        condition: service_completed_successfully
    volumes:
      - ./k6:/k6
      - ./proto:/k6/proto
      - ./k6-output:/tmp/output
    environment:
      VUS: 3000
      RATE: 5
      DURATION: "1m"
      TEST_NAME: "k6_lt_many_devices_low_rate"
    networks:
      - app_network
    entrypoint: ["k6", "run", "/k6/test.js"]

  # k6_lt_few_devices_high_rate:
  #   image: grafana/k6:latest
  #   container_name: k6_lt_few_devices_high_rate
  #   depends_on:
  #     k6_lt_many_devices_low_rate:
  #       condition: service_completed_successfully
  #   volumes:
  #     - ./k6:/k6
  #     - ./proto:/k6/proto
  #     - ./k6/output:/tmp/output
  #   environment:
  #     VUS: 1000
  #     RATE: 1
  #     DURATION: "1m"
  #     TEST_NAME: "k6_lt_few_devices_high_rate"
  #   networks:
  #     - app_network
  #   entrypoint: ["k6", "run", "/k6/test.js"]

  # k6_lt_peak_load_stress:
  #   image: grafana/k6:latest
  #   container_name: k6_lt_peak_load_stress
  #   depends_on:
  #     k6_lt_few_devices_high_rate:
  #       condition: service_completed_successfully
  #   volumes:
  #     - ./k6:/k6
  #     - ./proto:/k6/proto
  #     - ./k6/output:/tmp/output
  #   environment:
  #     VUS: 3000
  #     RATE: 1
  #     DURATION: "1m"
  #     TEST_NAME: "k6_lt_peak_load_stress"
  #   networks:
  #     - app_network
  #   entrypoint: ["k6", "run", "/k6/test.js"]

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app_network

volumes:
  esdata:
    driver: local
  dbdata6:
  grafana-data:

networks:
  app_network:
    driver: bridge